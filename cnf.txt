=_deriv -> = LIST_FORM
=_deriv1 -> = STRING
=_deriv2 -> = EXPRESSION
ASSIGN_OPERATOR_deriv -> ASSIGN_OPERATOR EXPRESSION
ALPHABET_deriv -> ALPHABET import_deriv
import_deriv -> import ALPHABET_deriv3
ALPHABET_deriv3 -> ALPHABET as_deriv
as_deriv -> as ALPHABET
ALPHABET_deriv4 -> ALPHABET import_deriv5
import_deriv5 -> import ALPHABET
ALPHABET_deriv6 -> ALPHABET as_deriv7
as_deriv7 -> as ALPHABET
BLOCK_CODE -> IF_ALGORITHM ELIF_STATE | BLOCK_CODE BLOCK_CODE | ALPHABET =_deriv | ALPHABET =_deriv1 | ALPHABET =_deriv2 | ALPHABET ASSIGN_OPERATOR_deriv | from ALPHABET_deriv | from ALPHABET_deriv4 | import ALPHABET_deriv6 | import ALPHABET | IF_ALGORITHM ELSE_STATE | if CONDITION_deriv8 | IF_STATE ELSE_STATE | while (_deriv | while BOOL_deriv11 | while CONDITION_deriv13 | for FOR_LOOP_deriv | def ALPHABET_deriv16 | def ALPHABET_deriv18 | def ALPHABET_deriv21 | with open_deriv | with open_deriv30 | ALPHABET ._deriv | ALPHABET ._deriv41 | ALPHABET ._deriv44 | pass | ALPHABET =_deriv51 | OUTPUT (_deriv52 | input (_deriv54 | print (_deriv56 | print (_deriv58 | print (_deriv60 | class ALPHABET_deriv62 | ALPHABET ._deriv64 | if CONDITION_deriv | IF_STATE ELIF_STATE | ALPHABET ._deriv48
CONDITION_deriv -> CONDITION :_deriv
:_deriv -> : RAISE_STATE
CONDITION_deriv8 -> CONDITION :_deriv9
:_deriv9 -> : BLOCK_CODE
(_deriv -> ( BOOL_deriv
BOOL_deriv -> BOOL )_deriv
)_deriv -> ) :_deriv10
:_deriv10 -> : ALGORITHM_NESTED
BOOL_deriv11 -> BOOL :_deriv12
:_deriv12 -> : ALGORITHM_NESTED
CONDITION_deriv13 -> CONDITION :_deriv14
:_deriv14 -> : ALGORITHM_NESTED
FOR_LOOP_deriv -> FOR_LOOP :_deriv15
:_deriv15 -> : ALGORITHM_NESTED
ALPHABET_deriv16 -> ALPHABET PARAM_STATE_deriv
PARAM_STATE_deriv -> PARAM_STATE :_deriv17
:_deriv17 -> : PRINT
ALPHABET_deriv18 -> ALPHABET PARAM_STATE_deriv19
PARAM_STATE_deriv19 -> PARAM_STATE :_deriv20
:_deriv20 -> : DEF_RETURN
ALPHABET_deriv21 -> ALPHABET PARAM_STATE_deriv22
PARAM_STATE_deriv22 -> PARAM_STATE :_deriv23
:_deriv23 -> : DEF_ALGORITHM
open_deriv -> open (_deriv24
(_deriv24 -> ( ALPHABET_deriv25
ALPHABET_deriv25 -> ALPHABET ,_deriv
,_deriv -> , STRING_deriv
STRING_deriv -> STRING )_deriv26
)_deriv26 -> ) as_deriv27
as_deriv27 -> as ALPHABET_deriv28
ALPHABET_deriv28 -> ALPHABET :_deriv29
:_deriv29 -> : BLOCK_CODE
open_deriv30 -> open (_deriv31
(_deriv31 -> ( STRING_deriv32
STRING_deriv32 -> STRING ,_deriv33
,_deriv33 -> , STRING_deriv34
STRING_deriv34 -> STRING )_deriv35
)_deriv35 -> ) as_deriv36
as_deriv36 -> as ALPHABET_deriv37
ALPHABET_deriv37 -> ALPHABET :_deriv38
:_deriv38 -> : BLOCK_CODE
._deriv -> . write_deriv
write_deriv -> write (_deriv39
(_deriv39 -> ( ALPHABET_deriv40
ALPHABET_deriv40 -> ALPHABET )
._deriv41 -> . write_deriv42
write_deriv42 -> write (_deriv43
(_deriv43 -> ( EXPRESSION_deriv
EXPRESSION_deriv -> EXPRESSION )
._deriv44 -> . write_deriv45
write_deriv45 -> write (_deriv46
(_deriv46 -> ( STRING_deriv47
STRING_deriv47 -> STRING )
._deriv48 -> . append_deriv
append_deriv -> append (_deriv49
(_deriv49 -> ( ALPHABET_deriv50
ALPHABET_deriv50 -> ALPHABET )
=_deriv51 -> = EXPRESSION
(_deriv52 -> ( ALPHABET_deriv53
ALPHABET_deriv53 -> ALPHABET )
(_deriv54 -> ( ALPHABET_deriv55
ALPHABET_deriv55 -> ALPHABET )
(_deriv56 -> ( EXPRESSION_deriv57
EXPRESSION_deriv57 -> EXPRESSION )
(_deriv58 -> ( ALPHABET_deriv59
ALPHABET_deriv59 -> ALPHABET )
(_deriv60 -> ( STRING_deriv61
STRING_deriv61 -> STRING )
ALPHABET_deriv62 -> ALPHABET :_deriv63
:_deriv63 -> : CLASS_ALGORITHM
._deriv64 -> . ALPHABET_deriv65
ALPHABET_deriv65 -> ALPHABET PARAM_STATE
IMPORT_FORM -> import ALPHABET | import ALPHABET_deriv66 | from ALPHABET_deriv68 | from ALPHABET_deriv70
ALPHABET_deriv66 -> ALPHABET as_deriv67
as_deriv67 -> as ALPHABET
ALPHABET_deriv68 -> ALPHABET import_deriv69
import_deriv69 -> import ALPHABET
ALPHABET_deriv70 -> ALPHABET import_deriv71
import_deriv71 -> import ALPHABET_deriv72
ALPHABET_deriv72 -> ALPHABET as_deriv73
as_deriv73 -> as ALPHABET
CONDITION_deriv74 -> CONDITION :_deriv75
:_deriv75 -> : RAISE_STATE
CONDITION_deriv76 -> CONDITION :_deriv77
:_deriv77 -> : BLOCK_CODE
IF_STATE -> IF_ALGORITHM ELIF_STATE | if CONDITION_deriv74 | if CONDITION_deriv76 | IF_ALGORITHM ELSE_STATE
CONDITION_deriv78 -> CONDITION :_deriv79
:_deriv79 -> : RAISE_STATE
CONDITION_deriv80 -> CONDITION :_deriv81
:_deriv81 -> : DEF_RETURN
CONDITION_deriv82 -> CONDITION :_deriv83
:_deriv83 -> : DEF_ALGORITHM
IF_STATE_DEF -> IF_ALGORITHM_DEF ELIF_STATE_DEF | if CONDITION_deriv80 | if CONDITION_deriv78 | if CONDITION_deriv82 | IF_ALGORITHM_DEF ELSE_STATE_DEF
CONDITION_deriv84 -> CONDITION :_deriv85
:_deriv85 -> : RAISE_STATE
CONDITION_deriv86 -> CONDITION :_deriv87
:_deriv87 -> : ALGORITHM_NESTED
IF_STATE_NESTED -> IF_ALGORITHM_NESTED ELIF_STATE_NESTED | if CONDITION_deriv86 | if CONDITION_deriv84 | IF_ALGORITHM_NESTED ELSE_STATE_NESTED
CONDITION_deriv88 -> CONDITION :_deriv89
:_deriv89 -> : BLOCK_CODE
IF_ALGORITHM -> if CONDITION_deriv90 | if CONDITION_deriv88
CONDITION_deriv90 -> CONDITION :_deriv91
:_deriv91 -> : RAISE_STATE
IF_ALGORITHM_DEF -> if CONDITION_deriv92 | if CONDITION_deriv94 | if CONDITION_deriv96
CONDITION_deriv92 -> CONDITION :_deriv93
:_deriv93 -> : DEF_ALGORITHM
CONDITION_deriv94 -> CONDITION :_deriv95
:_deriv95 -> : DEF_RETURN
CONDITION_deriv96 -> CONDITION :_deriv97
:_deriv97 -> : RAISE_STATE
IF_ALGORITHM_NESTED -> if CONDITION_deriv98 | if CONDITION_deriv100
CONDITION_deriv98 -> CONDITION :_deriv99
:_deriv99 -> : ALGORITHM_NESTED
CONDITION_deriv100 -> CONDITION :_deriv101
:_deriv101 -> : RAISE_STATE
IF_CONDITION -> if CONDITION
CONDITION_deriv102 -> CONDITION :_deriv103
:_deriv103 -> : RAISE_STATE
CONDITION_deriv104 -> CONDITION :_deriv105
:_deriv105 -> : BLOCK_CODE
ELIF_STATE -> ELIF_ALGORITHM ELIF_STATE | elif CONDITION_deriv102 | elif CONDITION_deriv104 | ELIF_ALGORITHM ELSE_STATE
CONDITION_deriv106 -> CONDITION :_deriv107
:_deriv107 -> : RAISE_STATE
CONDITION_deriv108 -> CONDITION :_deriv109
:_deriv109 -> : DEF_RETURN
CONDITION_deriv110 -> CONDITION :_deriv111
:_deriv111 -> : DEF_ALGORITHM
ELIF_STATE_DEF -> ELIF_ALGORITHM_DEF ELIF_STATE_DEF | elif CONDITION_deriv108 | elif CONDITION_deriv106 | elif CONDITION_deriv110 | ELIF_ALGORITHM_DEF ELSE_STATE_DEF
CONDITION_deriv112 -> CONDITION :_deriv113
:_deriv113 -> : RAISE_STATE
CONDITION_deriv114 -> CONDITION :_deriv115
:_deriv115 -> : ALGORITHM_NESTED
ELIF_STATE_NESTED -> ELIF_ALGORITHM_NESTED ELIF_STATE_NESTED | elif CONDITION_deriv114 | elif CONDITION_deriv112 | ELIF_ALGORITHM_NESTED ELSE_STATE_NESTED
CONDITION_deriv116 -> CONDITION :_deriv117
:_deriv117 -> : BLOCK_CODE
ELIF_ALGORITHM -> elif CONDITION_deriv118 | elif CONDITION_deriv116
CONDITION_deriv118 -> CONDITION :_deriv119
:_deriv119 -> : RAISE_STATE
ELIF_ALGORITHM_DEF -> elif CONDITION_deriv120 | elif CONDITION_deriv122 | elif CONDITION_deriv124
CONDITION_deriv120 -> CONDITION :_deriv121
:_deriv121 -> : DEF_ALGORITHM
CONDITION_deriv122 -> CONDITION :_deriv123
:_deriv123 -> : DEF_RETURN
CONDITION_deriv124 -> CONDITION :_deriv125
:_deriv125 -> : RAISE_STATE
ELIF_ALGORITHM_NESTED -> elif CONDITION_deriv126 | elif CONDITION_deriv128
CONDITION_deriv126 -> CONDITION :_deriv127
:_deriv127 -> : ALGORITHM_NESTED
CONDITION_deriv128 -> CONDITION :_deriv129
:_deriv129 -> : RAISE_STATE
ELSE_STATE -> else :_deriv130 | else :_deriv131 | else IF_STATE
:_deriv130 -> : BLOCK_CODE
:_deriv131 -> : RAISE_STATE
:_deriv132 -> : DEF_ALGORITHM
:_deriv133 -> : DEF_RETURN
ELSE_STATE_DEF -> else :_deriv134 | else :_deriv132 | else :_deriv133 | else IF_STATE_DEF
:_deriv134 -> : RAISE_STATE
:_deriv135 -> : ALGORITHM_NESTED
ELSE_STATE_NESTED -> else :_deriv136 | else :_deriv135 | else IF_STATE_NESTED
:_deriv136 -> : RAISE_STATE
WHILE_LOOP -> while CONDITION_deriv137 | while BOOL_deriv139 | while (_deriv141
CONDITION_deriv137 -> CONDITION :_deriv138
:_deriv138 -> : ALGORITHM_NESTED
BOOL_deriv139 -> BOOL :_deriv140
:_deriv140 -> : ALGORITHM_NESTED
(_deriv141 -> ( BOOL_deriv142
BOOL_deriv142 -> BOOL )_deriv143
)_deriv143 -> ) :_deriv144
:_deriv144 -> : ALGORITHM_NESTED
FOR_FORM -> for FOR_LOOP_deriv145
FOR_LOOP_deriv145 -> FOR_LOOP :_deriv146
:_deriv146 -> : ALGORITHM_NESTED
FOR_LOOP -> ALPHABET in_deriv | ALPHABET in_deriv147 | ALPHABET in_deriv150 | ALPHABET in_deriv156
in_deriv -> in ALPHABET
in_deriv147 -> in range_deriv
range_deriv -> range (_deriv148
(_deriv148 -> ( EXPRESSION_deriv149
EXPRESSION_deriv149 -> EXPRESSION )
in_deriv150 -> in range_deriv151
range_deriv151 -> range (_deriv152
(_deriv152 -> ( EXPRESSION_deriv153
EXPRESSION_deriv153 -> EXPRESSION ,_deriv154
,_deriv154 -> , EXPRESSION_deriv155
EXPRESSION_deriv155 -> EXPRESSION )
in_deriv156 -> in range_deriv157
range_deriv157 -> range (_deriv158
(_deriv158 -> ( EXPRESSION_deriv159
EXPRESSION_deriv159 -> EXPRESSION ,_deriv160
,_deriv160 -> , EXPRESSION_deriv161
EXPRESSION_deriv161 -> EXPRESSION ,_deriv162
,_deriv162 -> , EXPRESSION_deriv163
EXPRESSION_deriv163 -> EXPRESSION )
ALGORITHM_NESTED -> continue | ALGORITHM_NESTED ALGORITHM_NESTED | break | ALPHABET =_deriv164 | ALPHABET =_deriv165 | ALPHABET =_deriv166 | ALPHABET ASSIGN_OPERATOR_deriv167 | if CONDITION_deriv168 | if CONDITION_deriv170 | IF_ALGORITHM_NESTED ELSE_STATE_NESTED | IF_STATE_NESTED ELSE_STATE_NESTED | ALPHABET in_deriv174 | while (_deriv175 | while CONDITION_deriv179 | for FOR_LOOP_deriv181 | with open_deriv183 | with open_deriv192 | ALPHABET ._deriv201 | ALPHABET ._deriv205 | ALPHABET ._deriv209 | pass | ALPHABET =_deriv217 | OUTPUT (_deriv218 | input (_deriv220 | print (_deriv222 | print (_deriv224 | print (_deriv226 | if CONDITION_deriv172 | IF_STATE_NESTED ELIF_STATE_NESTED | ALPHABET ._deriv213
=_deriv164 -> = LIST_FORM
=_deriv165 -> = STRING
=_deriv166 -> = EXPRESSION
ASSIGN_OPERATOR_deriv167 -> ASSIGN_OPERATOR EXPRESSION
CONDITION_deriv168 -> CONDITION :_deriv169
:_deriv169 -> : DEF_ALGORITHM
CONDITION_deriv170 -> CONDITION :_deriv171
:_deriv171 -> : BLOCK_CODE
CONDITION_deriv172 -> CONDITION :_deriv173
:_deriv173 -> : RAISE_STATE
in_deriv174 -> in ALPHABET
(_deriv175 -> ( BOOL_deriv176
BOOL_deriv176 -> BOOL )_deriv177
)_deriv177 -> ) :_deriv178
:_deriv178 -> : ALGORITHM_NESTED
CONDITION_deriv179 -> CONDITION :_deriv180
:_deriv180 -> : ALGORITHM_NESTED
FOR_LOOP_deriv181 -> FOR_LOOP :_deriv182
:_deriv182 -> : ALGORITHM_NESTED
open_deriv183 -> open (_deriv184
(_deriv184 -> ( ALPHABET_deriv185
ALPHABET_deriv185 -> ALPHABET ,_deriv186
,_deriv186 -> , STRING_deriv187
STRING_deriv187 -> STRING )_deriv188
)_deriv188 -> ) as_deriv189
as_deriv189 -> as ALPHABET_deriv190
ALPHABET_deriv190 -> ALPHABET :_deriv191
:_deriv191 -> : BLOCK_CODE
open_deriv192 -> open (_deriv193
(_deriv193 -> ( STRING_deriv194
STRING_deriv194 -> STRING ,_deriv195
,_deriv195 -> , STRING_deriv196
STRING_deriv196 -> STRING )_deriv197
)_deriv197 -> ) as_deriv198
as_deriv198 -> as ALPHABET_deriv199
ALPHABET_deriv199 -> ALPHABET :_deriv200
:_deriv200 -> : BLOCK_CODE
._deriv201 -> . write_deriv202
write_deriv202 -> write (_deriv203
(_deriv203 -> ( ALPHABET_deriv204
ALPHABET_deriv204 -> ALPHABET )
._deriv205 -> . write_deriv206
write_deriv206 -> write (_deriv207
(_deriv207 -> ( EXPRESSION_deriv208
EXPRESSION_deriv208 -> EXPRESSION )
._deriv209 -> . write_deriv210
write_deriv210 -> write (_deriv211
(_deriv211 -> ( STRING_deriv212
STRING_deriv212 -> STRING )
._deriv213 -> . append_deriv214
append_deriv214 -> append (_deriv215
(_deriv215 -> ( ALPHABET_deriv216
ALPHABET_deriv216 -> ALPHABET )
=_deriv217 -> = EXPRESSION
(_deriv218 -> ( ALPHABET_deriv219
ALPHABET_deriv219 -> ALPHABET )
(_deriv220 -> ( ALPHABET_deriv221
ALPHABET_deriv221 -> ALPHABET )
(_deriv222 -> ( EXPRESSION_deriv223
EXPRESSION_deriv223 -> EXPRESSION )
(_deriv224 -> ( ALPHABET_deriv225
ALPHABET_deriv225 -> ALPHABET )
(_deriv226 -> ( STRING_deriv227
STRING_deriv227 -> STRING )
DEF_STATE -> def ALPHABET_deriv228 | def ALPHABET_deriv231 | def ALPHABET_deriv234
ALPHABET_deriv228 -> ALPHABET PARAM_STATE_deriv229
PARAM_STATE_deriv229 -> PARAM_STATE :_deriv230
:_deriv230 -> : DEF_ALGORITHM
ALPHABET_deriv231 -> ALPHABET PARAM_STATE_deriv232
PARAM_STATE_deriv232 -> PARAM_STATE :_deriv233
:_deriv233 -> : DEF_RETURN
ALPHABET_deriv234 -> ALPHABET PARAM_STATE_deriv235
PARAM_STATE_deriv235 -> PARAM_STATE :_deriv236
:_deriv236 -> : PRINT
=_deriv237 -> = LIST_FORM
=_deriv238 -> = STRING
=_deriv239 -> = EXPRESSION
ASSIGN_OPERATOR_deriv240 -> ASSIGN_OPERATOR EXPRESSION
DEF_ALGORITHM -> if CONDITION_deriv241 | DEF_ALGORITHM DEF_ALGORITHM | ALPHABET =_deriv237 | ALPHABET =_deriv238 | ALPHABET =_deriv239 | ALPHABET ASSIGN_OPERATOR_deriv240 | IF_ALGORITHM_NESTED ELIF_STATE_NESTED | IF_ALGORITHM_DEF ELIF_STATE_DEF | if CONDITION_deriv245 | IF_STATE_DEF ELSE_STATE_DEF | ALPHABET in_deriv247 | while (_deriv248 | while CONDITION_deriv252 | for FOR_LOOP_deriv254 | ALPHABET =_deriv256 | def ALPHABET_deriv257 | def ALPHABET_deriv260 | with open_deriv263 | with open_deriv272 | ALPHABET ._deriv281 | ALPHABET ._deriv285 | ALPHABET ._deriv289 | pass | ALPHABET =_deriv297 | OUTPUT (_deriv298 | input (_deriv300 | print (_deriv302 | print (_deriv304 | print (_deriv306 | class ALPHABET_deriv308 | if CONDITION_deriv243 | IF_STATE_DEF ELIF_STATE_DEF | ALPHABET ._deriv293
CONDITION_deriv241 -> CONDITION :_deriv242
:_deriv242 -> : ALGORITHM_NESTED
CONDITION_deriv243 -> CONDITION :_deriv244
:_deriv244 -> : DEF_ALGORITHM
CONDITION_deriv245 -> CONDITION :_deriv246
:_deriv246 -> : RAISE_STATE
in_deriv247 -> in ALPHABET
(_deriv248 -> ( BOOL_deriv249
BOOL_deriv249 -> BOOL )_deriv250
)_deriv250 -> ) :_deriv251
:_deriv251 -> : ALGORITHM_NESTED
CONDITION_deriv252 -> CONDITION :_deriv253
:_deriv253 -> : ALGORITHM_NESTED
FOR_LOOP_deriv254 -> FOR_LOOP :_deriv255
:_deriv255 -> : ALGORITHM_NESTED
=_deriv256 -> = LIST_FORM
ALPHABET_deriv257 -> ALPHABET PARAM_STATE_deriv258
PARAM_STATE_deriv258 -> PARAM_STATE :_deriv259
:_deriv259 -> : PRINT
ALPHABET_deriv260 -> ALPHABET PARAM_STATE_deriv261
PARAM_STATE_deriv261 -> PARAM_STATE :_deriv262
:_deriv262 -> : DEF_ALGORITHM
open_deriv263 -> open (_deriv264
(_deriv264 -> ( ALPHABET_deriv265
ALPHABET_deriv265 -> ALPHABET ,_deriv266
,_deriv266 -> , STRING_deriv267
STRING_deriv267 -> STRING )_deriv268
)_deriv268 -> ) as_deriv269
as_deriv269 -> as ALPHABET_deriv270
ALPHABET_deriv270 -> ALPHABET :_deriv271
:_deriv271 -> : BLOCK_CODE
open_deriv272 -> open (_deriv273
(_deriv273 -> ( STRING_deriv274
STRING_deriv274 -> STRING ,_deriv275
,_deriv275 -> , STRING_deriv276
STRING_deriv276 -> STRING )_deriv277
)_deriv277 -> ) as_deriv278
as_deriv278 -> as ALPHABET_deriv279
ALPHABET_deriv279 -> ALPHABET :_deriv280
:_deriv280 -> : BLOCK_CODE
._deriv281 -> . write_deriv282
write_deriv282 -> write (_deriv283
(_deriv283 -> ( ALPHABET_deriv284
ALPHABET_deriv284 -> ALPHABET )
._deriv285 -> . write_deriv286
write_deriv286 -> write (_deriv287
(_deriv287 -> ( EXPRESSION_deriv288
EXPRESSION_deriv288 -> EXPRESSION )
._deriv289 -> . write_deriv290
write_deriv290 -> write (_deriv291
(_deriv291 -> ( STRING_deriv292
STRING_deriv292 -> STRING )
._deriv293 -> . append_deriv294
append_deriv294 -> append (_deriv295
(_deriv295 -> ( ALPHABET_deriv296
ALPHABET_deriv296 -> ALPHABET )
=_deriv297 -> = EXPRESSION
(_deriv298 -> ( ALPHABET_deriv299
ALPHABET_deriv299 -> ALPHABET )
(_deriv300 -> ( ALPHABET_deriv301
ALPHABET_deriv301 -> ALPHABET )
(_deriv302 -> ( EXPRESSION_deriv303
EXPRESSION_deriv303 -> EXPRESSION )
(_deriv304 -> ( ALPHABET_deriv305
ALPHABET_deriv305 -> ALPHABET )
(_deriv306 -> ( STRING_deriv307
STRING_deriv307 -> STRING )
ALPHABET_deriv308 -> ALPHABET :_deriv309
:_deriv309 -> : CLASS_ALGORITHM
DEF_RETURN -> DEF_ALGORITHM RETURN_STATE | return RETURN_PARAM
PARAM_STATE -> ( PARAM_deriv | ( )
PARAM_deriv -> PARAM )
PARAM -> word | ALPHABET ,_deriv310 | ALPHABET =_deriv311 | ALPHABET =_deriv314 | ALPHABET =_deriv315 | ALPHABET =_deriv318 | ( self_deriv
,_deriv310 -> , PARAM
=_deriv311 -> = STRING_deriv312
STRING_deriv312 -> STRING ,_deriv313
,_deriv313 -> , PARAM
=_deriv314 -> = STRING
=_deriv315 -> = ALPHABET_deriv316
ALPHABET_deriv316 -> ALPHABET ,_deriv317
,_deriv317 -> , PARAM
=_deriv318 -> = ALPHABET
self_deriv -> self )
OPERATOR -> input (_deriv319 | OUTPUT (_deriv321 | ALPHABET =_deriv323
(_deriv319 -> ( ALPHABET_deriv320
ALPHABET_deriv320 -> ALPHABET )
(_deriv321 -> ( ALPHABET_deriv322
ALPHABET_deriv322 -> ALPHABET )
=_deriv323 -> = EXPRESSION
CONDITION_deriv324 -> CONDITION )
LOGIC_OPERATOR_deriv -> LOGIC_OPERATOR CONDITION
RELATION_OPERATOR_deriv -> RELATION_OPERATOR EXPRESSION
CONDITION -> word | ( CONDITION_deriv324 | CONDITION LOGIC_OPERATOR_deriv | EXPRESSION RELATION_OPERATOR_deriv | NOT CONDITION | False | True
._deriv325 -> . NUM
EXPRESSION -> - NUM
EXPRESSION -> ( EXPRESSION_deriv326 | word | NUM ._deriv325 | num | - FLOAT | EXPRESSION ARITHMATIC_OPERATOR_deriv | len (_deriv327 | len (_deriv329 | ALPHABET ._deriv332 | None
EXPRESSION_deriv326 -> EXPRESSION )
ARITHMATIC_OPERATOR_deriv -> ARITHMATIC_OPERATOR EXPRESSION
(_deriv327 -> ( ALPHABET_deriv328
ALPHABET_deriv328 -> ALPHABET )
(_deriv329 -> ( ALPHABET_deriv330
ALPHABET_deriv330 -> ALPHABET )_deriv331
)_deriv331 -> ) EXPRESSION
._deriv332 -> . ALPHABET
RETURN_STATE -> return RETURN_PARAM
,_deriv333 -> , RETURN_PARAM
RETURN_PARAM -> - NUM | word | ALPHABET ,_deriv333 | num | NUM ._deriv334 | - FLOAT | ' STRING_OF_ALPHA_deriv335 | " STRING_OF_ALPHA_deriv
._deriv334 -> . NUM
STRING_OF_ALPHA_deriv -> STRING_OF_ALPHA "
STRING_OF_ALPHA_deriv335 -> STRING_OF_ALPHA '
CLASS_STATE -> class ALPHABET_deriv336
ALPHABET_deriv336 -> ALPHABET :_deriv337
:_deriv337 -> : CLASS_ALGORITHM
=_deriv338 -> = LIST_FORM
=_deriv339 -> = STRING
=_deriv340 -> = EXPRESSION
ASSIGN_OPERATOR_deriv341 -> ASSIGN_OPERATOR EXPRESSION
CLASS_ALGORITHM -> if CONDITION_deriv342 | CLASS_ALGORITHM CLASS_ALGORITHM | ALPHABET =_deriv338 | ALPHABET =_deriv339 | ALPHABET =_deriv340 | ALPHABET ASSIGN_OPERATOR_deriv341 | IF_ALGORITHM ELSE_STATE | from ALPHABET_deriv344 | import ALPHABET | if CONDITION_deriv348 | IF_ALGORITHM ELSE_STATE | ALPHABET in_deriv350 | while (_deriv351 | while CONDITION_deriv355 | for FOR_LOOP_deriv357 | def ALPHABET_deriv359 | def ALPHABET_deriv365 | with open_deriv371 | with open_deriv380 | DEF_STATE| WRITE_ALGORITHM | ALPHABET ._deriv389 | CONDITION LOGIC_OPERATOR_deriv393 | ALPHABET =_deriv394 | input (_deriv395 | print (_deriv397 | print (_deriv399 | print (_deriv401 | if CONDITION_deriv346 | IF_ALGORITHM ELIF_STATE | pass
CONDITION_deriv342 -> CONDITION :_deriv343
:_deriv343 -> : RAISE_STATE
ALPHABET_deriv344 -> ALPHABET import_deriv345
import_deriv345 -> import ALPHABET
CONDITION_deriv346 -> CONDITION :_deriv347
:_deriv347 -> : DEF_ALGORITHM
CONDITION_deriv348 -> CONDITION :_deriv349
:_deriv349 -> : BLOCK_CODE
in_deriv350 -> in ALPHABET
(_deriv351 -> ( BOOL_deriv352
BOOL_deriv352 -> BOOL )_deriv353
)_deriv353 -> ) :_deriv354
:_deriv354 -> : ALGORITHM_NESTED
CONDITION_deriv355 -> CONDITION :_deriv356
:_deriv356 -> : ALGORITHM_NESTED
FOR_LOOP_deriv357 -> FOR_LOOP :_deriv358
:_deriv358 -> : ALGORITHM_NESTED
ALPHABET_deriv359 -> ALPHABET (_deriv360
(_deriv360 -> ( self_deriv361
self_deriv361 -> self ,_deriv362
,_deriv362 -> , PARAM_deriv363
PARAM_deriv363 -> PARAM )_deriv364
)_deriv364 -> ) DEF_RETURN
ALPHABET_deriv365 -> ALPHABET (_deriv366
(_deriv366 -> ( self_deriv367
self_deriv367 -> self ,_deriv368
,_deriv368 -> , PARAM_deriv369
PARAM_deriv369 -> PARAM )_deriv370
)_deriv370 -> ) BLOCK_CODE
open_deriv371 -> open (_deriv372
(_deriv372 -> ( ALPHABET_deriv373
ALPHABET_deriv373 -> ALPHABET ,_deriv374
,_deriv374 -> , STRING_deriv375
STRING_deriv375 -> STRING )_deriv376
)_deriv376 -> ) as_deriv377
as_deriv377 -> as ALPHABET_deriv378
ALPHABET_deriv378 -> ALPHABET :_deriv379
:_deriv379 -> : BLOCK_CODE
open_deriv380 -> open (_deriv381
(_deriv381 -> ( STRING_deriv382
STRING_deriv382 -> STRING ,_deriv383
,_deriv383 -> , STRING_deriv384
STRING_deriv384 -> STRING )_deriv385
)_deriv385 -> ) as_deriv386
as_deriv386 -> as ALPHABET_deriv387
ALPHABET_deriv387 -> ALPHABET :_deriv388
:_deriv388 -> : BLOCK_CODE
._deriv389 -> . append_deriv390
append_deriv390 -> append (_deriv391
(_deriv391 -> ( ALPHABET_deriv392
ALPHABET_deriv392 -> ALPHABET )
LOGIC_OPERATOR_deriv393 -> LOGIC_OPERATOR CONDITION
=_deriv394 -> = EXPRESSION
(_deriv395 -> ( ALPHABET_deriv396
ALPHABET_deriv396 -> ALPHABET )
(_deriv397 -> ( EXPRESSION_deriv398
EXPRESSION_deriv398 -> EXPRESSION )
(_deriv399 -> ( ALPHABET_deriv400
ALPHABET_deriv400 -> ALPHABET )
(_deriv401 -> ( STRING_deriv402
STRING_deriv402 -> STRING )
DEF_CLASS_STATE -> def ALPHABET_deriv403 | def ALPHABET_deriv409
ALPHABET_deriv403 -> ALPHABET (_deriv404
(_deriv404 -> ( self_deriv405
self_deriv405 -> self ,_deriv406
,_deriv406 -> , PARAM_deriv407
PARAM_deriv407 -> PARAM )_deriv408
)_deriv408 -> ) BLOCK_CODE
ALPHABET_deriv409 -> ALPHABET (_deriv410
(_deriv410 -> ( self_deriv411
self_deriv411 -> self ,_deriv412
,_deriv412 -> , PARAM_deriv413
PARAM_deriv413 -> PARAM )_deriv414
)_deriv414 -> ) DEF_RETURN
LIST_FORM -> [ ] | [ ELMT_LIST_deriv | [ ALPHABET_deriv415
ELMT_LIST_deriv -> ELMT_LIST ]
ALPHABET_deriv415 -> ALPHABET for_deriv
for_deriv -> for FOR_LOOP_deriv416
FOR_LOOP_deriv416 -> FOR_LOOP ]
ALPHABET_deriv417 -> ALPHABET for_deriv418
for_deriv418 -> for FOR_LOOP_deriv419
FOR_LOOP_deriv419 -> FOR_LOOP ]
ALPHABET_deriv420 -> ALPHABET for_deriv421
for_deriv421 -> for FOR_LOOP_deriv422
FOR_LOOP_deriv422 -> FOR_LOOP ]
,_deriv423 -> , ELMT_LIST
ALPHABET_deriv424 -> ALPHABET :_deriv425
:_deriv425 -> : CLASS_ALGORITHM
STRING_OF_ALPHA_deriv426 -> STRING_OF_ALPHA "
._deriv427 -> . NUM
ELMT_LIST -> len (_deriv428 | LIST_FORM ,_deriv423 | [ ALPHABET_deriv417 | [ ALPHABET_deriv420 | [ ] | class ALPHABET_deriv424 | " STRING_OF_ALPHA_deriv426 | NUM ._deriv427 | num | None | EXPRESSION ARITHMATIC_OPERATOR_deriv431 | - FLOAT | NUM ._deriv432 | EXPRESSION ,_deriv433 | num | " STRING_OF_ALPHA_deriv435 | ' STRING_OF_ALPHA_deriv436 | STRING ,_deriv437 | word | num | NUM ,_deriv434
(_deriv428 -> ( ALPHABET_deriv429
ALPHABET_deriv429 -> ALPHABET )_deriv430
)_deriv430 -> ) EXPRESSION
ARITHMATIC_OPERATOR_deriv431 -> ARITHMATIC_OPERATOR EXPRESSION
._deriv432 -> . NUM
,_deriv433 -> , ELMT_LIST
,_deriv434 -> , ELMT_LIST
STRING_OF_ALPHA_deriv435 -> STRING_OF_ALPHA "
STRING_OF_ALPHA_deriv436 -> STRING_OF_ALPHA '
,_deriv437 -> , ELMT_LIST
STRING -> ' STRING_OF_ALPHA_deriv438 | " STRING_OF_ALPHA_deriv439
STRING_OF_ALPHA_deriv438 -> STRING_OF_ALPHA '
STRING_OF_ALPHA_deriv439 -> STRING_OF_ALPHA "
STRING_OF_ALPHA -> word | ALPHABET STRING_OF_ALPHA
SENTENCE -> word | ALPHABET SENTENCE
ASSIGNMENT -> ALPHABET =_deriv440 | ALPHABET =_deriv441 | ALPHABET =_deriv442
=_deriv440 -> = EXPRESSION
=_deriv441 -> = STRING
=_deriv442 -> = LIST_FORM
ASSIGN_INTEGER -> ALPHABET ASSIGN_OPERATOR_deriv443
ASSIGN_OPERATOR_deriv443 -> ASSIGN_OPERATOR EXPRESSION
WITH_STATEMENT -> with open_deriv444 | with open_deriv453
open_deriv444 -> open (_deriv445
(_deriv445 -> ( STRING_deriv446
STRING_deriv446 -> STRING ,_deriv447
,_deriv447 -> , STRING_deriv448
STRING_deriv448 -> STRING )_deriv449
)_deriv449 -> ) as_deriv450
as_deriv450 -> as ALPHABET_deriv451
ALPHABET_deriv451 -> ALPHABET :_deriv452
:_deriv452 -> : BLOCK_CODE
open_deriv453 -> open (_deriv454
(_deriv454 -> ( ALPHABET_deriv455
ALPHABET_deriv455 -> ALPHABET ,_deriv456
,_deriv456 -> , STRING_deriv457
STRING_deriv457 -> STRING )_deriv458
)_deriv458 -> ) as_deriv459
as_deriv459 -> as ALPHABET_deriv460
ALPHABET_deriv460 -> ALPHABET :_deriv461
:_deriv461 -> : BLOCK_CODE
WRITE_ALGORITHM -> ALPHABET ._deriv462 | ALPHABET ._deriv466 | ALPHABET ._deriv470
._deriv462 -> . write_deriv463
write_deriv463 -> write (_deriv464
(_deriv464 -> ( STRING_deriv465
STRING_deriv465 -> STRING )
._deriv466 -> . write_deriv467
write_deriv467 -> write (_deriv468
(_deriv468 -> ( EXPRESSION_deriv469
EXPRESSION_deriv469 -> EXPRESSION )
._deriv470 -> . write_deriv471
write_deriv471 -> write (_deriv472
(_deriv472 -> ( ALPHABET_deriv473
ALPHABET_deriv473 -> ALPHABET )
FLOAT -> NUM ._deriv474
._deriv474 -> . NUM
NEGATIVE_FLOAT -> - FLOAT
NEGATIVE_NUM -> - NUM
ALPHABET -> word
NUM -> num
BOOL -> True | False
ARITHMATIC_OPERATOR -> * | - | + | / | %
LOGIC_OPERATOR -> or | and | not
RELATION_OPERATOR -> < =
RELATION_OPERATOR -> ! = | < | > | > = | = =
ASSIGN_OPERATOR -> + = | = | - = | / =
ASSIGN_OPERATOR -> * =
PRINT -> print (_deriv475 | print (_deriv477 | print (_deriv479
(_deriv475 -> ( STRING_deriv476
STRING_deriv476 -> STRING )
(_deriv477 -> ( ALPHABET_deriv478
ALPHABET_deriv478 -> ALPHABET )
(_deriv479 -> ( EXPRESSION_deriv480
EXPRESSION_deriv480 -> EXPRESSION )
COMMENT -> # SENTENCE | COMMENT_QUOTATION QUOTATION_COMMENT_SENTENCE_deriv
QUOTATION_COMMENT_SENTENCE_deriv -> QUOTATION_COMMENT_SENTENCE COMMENT_QUOTATION
=_deriv481 -> = EXPRESSION
QUOTATION_COMMENT_SENTENCE -> SENTENCE QUOTATION_COMMENT_SENTENCE | ALPHABET =_deriv481 | word
RAISE_STATE -> raise ERROR_deriv
ERROR_deriv -> ERROR (_deriv482
(_deriv482 -> ( STRING_deriv483
STRING_deriv483 -> STRING )
ERROR -> TypeError | ZeroDivisionError | ValueError | IOERROR | ImportError | NameError
QUOTE_MARK -> '
COMMENT_QUOTATION -> QUOTE_MARK QUOTE_MARK_deriv
QUOTE_MARK_deriv -> QUOTE_MARK QUOTE_MARK
