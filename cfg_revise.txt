BLOCK_CODE -> BLOCK_CODE BLOCK_CODE | ASSIGNMENT | ASSIGN_INTEGER | IMPORT_FORM | IF_STATE | IF_STATE ELSE_STATE | IF_STATE ELIF_STATE | WHILE_LOOP | FOR_FORM | DEF_STATE | WITH_STATEMENT | WRITE_ALGORITHM | pass | ALPHABET . append ( ALPHABET ) | OPERATOR | PRINT | CLASS_STATE | ALPHABET . ALPHABET PARAM_STATE
IMPORT_FORM -> import ALPHABET | import ALPHABET as ALPHABET | from ALPHABET import ALPHABET | from ALPHABET import ALPHABET as ALPHABET
IF_STATE -> IF_ALGORITHM | IF_ALGORITHM ELSE_STATE | IF_ALGORITHM ELIF_STATE
IF_STATE_DEF -> IF_ALGORITHM_DEF | IF_ALGORITHM_DEF ELSE_STATE_DEF | IF_ALGORITHM_DEF ELIF_STATE_DEF
IF_STATE_NESTED -> IF_ALGORITHM_NESTED | IF_ALGORITHM_NESTED ELSE_STATE_NESTED | IF_ALGORITHM_NESTED ELIF_STATE_NESTED
IF_ALGORITHM -> if CONDITION : BLOCK_CODE | if CONDITION : RAISE_STATE
IF_ALGORITHM_DEF -> if CONDITION : DEF_ALGORITHM | if CONDITION : DEF_RETURN | if CONDITION : RAISE_STATE
IF_ALGORITHM_NESTED -> if CONDITION : ALGORITHM_NESTED | if CONDITION : RAISE_STATE
IF_CONDITION -> if CONDITION
ELIF_STATE -> ELIF_ALGORITHM | ELIF_ALGORITHM ELSE_STATE | ELIF_ALGORITHM ELIF_STATE
ELIF_STATE_DEF -> ELIF_ALGORITHM_DEF | ELIF_ALGORITHM_DEF ELSE_STATE_DEF | ELIF_ALGORITHM_DEF ELIF_STATE_DEF
ELIF_STATE_NESTED -> ELIF_ALGORITHM_NESTED | ELIF_ALGORITHM_NESTED ELSE_STATE_NESTED | ELIF_ALGORITHM_NESTED ELIF_STATE_NESTED
ELIF_ALGORITHM -> elif CONDITION : BLOCK_CODE | elif CONDITION : RAISE_STATE
ELIF_ALGORITHM_DEF -> elif CONDITION : DEF_ALGORITHM | elif CONDITION : DEF_RETURN | elif CONDITION : RAISE_STATE
ELIF_ALGORITHM_NESTED -> elif CONDITION : ALGORITHM_NESTED | elif CONDITION : RAISE_STATE
ELSE_STATE -> else : BLOCK_CODE | else : RAISE_STATE | else IF_STATE
ELSE_STATE_DEF -> else : DEF_ALGORITHM | else : DEF_RETURN | else IF_STATE_DEF | else : RAISE_STATE
ELSE_STATE_NESTED -> else : ALGORITHM_NESTED | else IF_STATE_NESTED | else : RAISE_STATE
WHILE_LOOP -> while CONDITION : ALGORITHM_NESTED | while BOOL : ALGORITHM_NESTED | while ( BOOL ) : ALGORITHM_NESTED
FOR_FORM -> for FOR_LOOP : ALGORITHM_NESTED
FOR_LOOP -> ALPHABET in ALPHABET | ALPHABET in range ( EXPRESSION ) | ALPHABET in range ( EXPRESSION , EXPRESSION ) | ALPHABET in range ( EXPRESSION , EXPRESSION , EXPRESSION )
ALGORITHM_NESTED -> ALGORITHM_NESTED ALGORITHM_NESTED | break | continue | ASSIGNMENT | ASSIGN_INTEGER | IF_STATE_NESTED | IF_STATE_NESTED ELSE_STATE_NESTED | IF_STATE_NESTED ELIF_STATE_NESTED | WHILE_LOOP | FOR_FORM | WITH_STATEMENT | WRITE_ALGORITHM | pass | ALPHABET . append ( ALPHABET ) | OPERATOR | PRINT
DEF_STATE -> def ALPHABET PARAM_STATE : DEF_ALGORITHM | def ALPHABET PARAM_STATE : DEF_RETURN | def ALPHABET PARAM_STATE : PRINT
DEF_ALGORITHM -> DEF_ALGORITHM DEF_ALGORITHM | ASSIGNMENT | ASSIGN_INTEGER | IF_STATE_DEF | IF_STATE_DEF ELSE_STATE_DEF | IF_STATE_DEF ELIF_STATE_DEF | WHILE_LOOP | FOR_FORM | DEF_STATE | WITH_STATEMENT | WRITE_ALGORITHM | pass | ALPHABET . append ( ALPHABET ) | OPERATOR | PRINT | CLASS_STATE
DEF_RETURN -> DEF_ALGORITHM RETURN_STATE | RETURN_STATE
PARAM_STATE -> ( PARAM ) | ( )
PARAM -> ALPHABET | ALPHABET , PARAM | ALPHABET = STRING , PARAM | ALPHABET = STRING | ALPHABET = ALPHABET , PARAM | ALPHABET = ALPHABET | ( self )
OPERATOR -> input ( ALPHABET ) | OUTPUT ( ALPHABET ) | ALPHABET = EXPRESSION 
CONDITION -> ( CONDITION ) | CONDITION LOGIC_OPERATOR CONDITION | EXPRESSION RELATION_OPERATOR EXPRESSION | NOT CONDITION | ALPHABET | BOOL
EXPRESSION -> FLOAT | ALPHABET | NUM | NEGATIVE_NUM | NEGATIVE_FLOAT | ( EXPRESSION ) | EXPRESSION ARITHMATIC_OPERATOR EXPRESSION | len ( ALPHABET ) | len ( ALPHABET ) EXPRESSION | ALPHABET . ALPHABET | None
RETURN_STATE -> return RETURN_PARAM 
RETURN_PARAM -> ALPHABET | ALPHABET , RETURN_PARAM | NUM | NEGATIVE_NUM | FLOAT | NEGATIVE_FLOAT | STRING
CLASS_STATE -> class ALPHABET : CLASS_ALGORITHM 
CLASS_ALGORITHM -> CLASS_ALGORITHM CLASS_ALGORITHM | ASSIGNMENT | ASSIGN_INTEGER | IMPORT_FORM | IF_ALGORITHM | IF_ALGORITHM ELSE_STATE | IF_ALGORITHM ELIF_STATE | WHILE_LOOP | FOR_FORM | DEF_CLASS_STATE | WITH_STATEMENT | DEF_STATE| WRITE_ALGORITHM | pass | ALPHABET . append ( ALPHABET ) | OPERATOR | PRINT
DEF_CLASS_STATE -> def ALPHABET ( self , PARAM ) BLOCK_CODE | def ALPHABET ( self , PARAM ) DEF_RETURN
LIST_FORM -> [ ] | [ ELMT_LIST ] | [ ALPHABET for FOR_LOOP ]
ELMT_LIST -> LIST_FORM | LIST_FORM , ELMT_LIST | EXPRESSION | EXPRESSION , ELMT_LIST | NUM | NUM , ELMT_LIST | STRING | STRING , ELMT_LIST
STRING -> ' STRING_OF_ALPHA ' | " STRING_OF_ALPHA "
STRING_OF_ALPHA -> ALPHABET | ALPHABET STRING_OF_ALPHA
SENTENCE -> ALPHABET | ALPHABET SENTENCE
ASSIGNMENT -> ALPHABET = EXPRESSION | ALPHABET = STRING | ALPHABET = LIST_FORM 
ASSIGN_INTEGER -> ALPHABET ASSIGN_OPERATOR EXPRESSION
WITH_STATEMENT -> with open ( STRING , STRING ) as ALPHABET : BLOCK_CODE | with open ( ALPHABET , STRING ) as ALPHABET : BLOCK_CODE
WRITE_ALGORITHM -> ALPHABET . write ( STRING ) | ALPHABET . write ( EXPRESSION ) | ALPHABET . write ( ALPHABET )
FLOAT -> NUM . NUM
NEGATIVE_FLOAT -> - FLOAT
NEGATIVE_NUM -> - NUM
ALPHABET -> word
NUM -> num
BOOL -> True | False
ARITHMATIC_OPERATOR -> - | + | * | / | % | **
LOGIC_OPERATOR -> and | or | not
RELATION_OPERATOR -> > | < | > = | < = | = = | ! =
ASSIGN_OPERATOR -> = | + = | - = | * = | / =
PRINT -> print ( STRING ) | print ( ALPHABET ) | print ( EXPRESSION )
COMMENT -> # SENTENCE | COMMENT_QUOTATION QUOTATION_COMMENT_SENTENCE COMMENT_QUOTATION
QUOTATION_COMMENT_SENTENCE -> SENTENCE | SENTENCE QUOTATION_COMMENT_SENTENCE
RAISE_STATE -> raise ERROR ( STRING )
ERROR -> ZeroDivisionError | ValueError | TypeError | IOERROR | NameError | ImportError
QUOTE_MARK -> '
COMMENT_QUOTATION -> QUOTE_MARK QUOTE_MARK QUOTE_MARK
GREATER_THAN -> >